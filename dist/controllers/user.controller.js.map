{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["validationResult","require","UserController","store","req","res","errors","isEmpty","flash","array","status","redirect","UserRepository","create","body","then","newUser","catch","error","register","render","login","logout","profile","findByUsername","params","username","userFound","snippetsByUser","_id","update","user","slugUsername","findById","updatePassword","password","console","log","module","exports"],"mappings":"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","sourcesContent":["import UserRepository from '../repositories/UserRepository';\r\nconst { validationResult } = require('express-validator');\r\n\r\nconst UserController = {\r\n    store: async (req, res) => {\r\n        const errors = validationResult(req);\r\n        if (!errors.isEmpty()) {\r\n            req.flash('errors', errors.array());\r\n            return res.status(400).redirect('/users/register');\r\n        }\r\n\r\n        await UserRepository.create(req.body)\r\n            .then(newUser => {\r\n                req.flash('success', \"Account created successfully\");\r\n                res.status(200).redirect(\"/users/login\");\r\n            }).catch(error => {\r\n                req.flash('error', \"An error has occured\");\r\n                res.status(400).redirect(\"/users/register\");\r\n            });\r\n    },\r\n    register: async (req, res) => {\r\n        res.render(\"register\");\r\n    },\r\n    login: async (req, res) => {\r\n        res.render(\"login\");\r\n    },\r\n    logout: async (req, res) => {\r\n        req.logout();\r\n        req.flash(\"success\", \"You are logged out now!\");\r\n        res.redirect(\"/users/login\");\r\n    },\r\n    profile: async (req, res) => {\r\n        await UserRepository.findByUsername(req.params.username).then( async userFound => {\r\n            if (userFound === null) {\r\n                req.flash(\"errorNotFound\", \"An error has ocurred may be the user doesn't exist\");\r\n                res.render('profile');\r\n            } else {\r\n                const snippetsByUser = await UserRepository.snippetsByUser(userFound._id);\r\n                res.render('profile', { userFound, snippetsByUser });\r\n            }\r\n        }).catch(error => {\r\n            res.render('profile', { error: \"An error has ocurred may be the user doesn't exist\" });\r\n        });\r\n    },\r\n    update: async (req, res) => {\r\n        const errors = validationResult(req);\r\n        if (!errors.isEmpty()) {\r\n            req.flash('errors', errors.array());\r\n            return res.status(400).redirect(`/users/profile/${req.user.slugUsername}`);\r\n        }\r\n\r\n        await UserRepository.update(req.body, req.user._id)\r\n            .then(async newUser => {\r\n                const user = await UserRepository.findById(req.user._id);\r\n                req.flash('success', \"Account updated successfully\");\r\n                res.status(200).redirect(`/users/profile/${user.slugUsername}`);\r\n            }).catch(error => {\r\n                req.flash('error', \"An error has occured\");\r\n                res.status(400).redirect(`/users/profile/${req.user.slugUsername}`);\r\n            });\r\n    },\r\n    updatePassword: async (req, res) => {\r\n        const errors = validationResult(req);\r\n        if (!errors.isEmpty()) {\r\n            req.flash('errors', errors.array());\r\n            return res.status(400).redirect(`/users/profile/${req.user.slugUsername}`);\r\n        }\r\n\r\n        await UserRepository.updatePassword(req.body.password, req.user._id)\r\n            .then(newUser => {\r\n                req.flash('success', \"Password updated successfully\");\r\n                res.status(200).redirect(`/users/profile/${req.user.slugUsername}`);\r\n            }).catch(error => {\r\n                console.log(error);\r\n                req.flash('error', \"An error has occured\");\r\n                res.status(400).redirect(`/users/profile/${req.user.slugUsername}`);\r\n            });\r\n    }\r\n};\r\n\r\nmodule.exports = UserController;"],"file":"user.controller.js"}