{"version":3,"sources":["../../src/realtime/editor.js"],"names":["sockets","usersByRoom","module","exports","runSocket","io","passportSocketIo","passport","cookieParser","mongoStore","use","authorize","key","secret","store","on","socket","currRoom","request","_query","snippetID","user","_id","console","log","room","join","Object","keys","adapter","rooms","forEach","sock","userByRoom","connected","in","emit","users","eventData","broadcast","to","id","value","userId","error"],"mappings":"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","sourcesContent":["let sockets = {};\r\nlet usersByRoom = {};\r\n\r\nmodule.exports = function runSocket(io, passportSocketIo, passport, cookieParser, mongoStore) {\r\n    io.use(passportSocketIo.authorize({\r\n        key: 'connect.sid',\r\n        secret: \"secret123\",\r\n        passport: passport,\r\n        cookieParser: cookieParser,\r\n        store: mongoStore,\r\n    }));\r\n\r\n\r\n    io.on('connection', function (socket) {\r\n        let currRoom = socket.request._query.snippetID;\r\n        if (!sockets[socket.request.user._id]) {\r\n            console.log(\"Client connected\");\r\n            socket.room = currRoom;\r\n            sockets[socket.request.user._id] = socket;\r\n        }\r\n\r\n        //socket.join(currRoom);\r\n\r\n\r\n        //console.log(io.sockets.adapter.rooms[currRoom], currRoom);\r\n\r\n\r\n        //socket.to(currRoom).emit('joined', { users: usersByRoom });\r\n\r\n        socket.on('create', function (room) {\r\n            socket.join(room);\r\n            Object.keys(io.sockets.adapter.rooms[currRoom].sockets).forEach(sock => {\r\n                let userByRoom = io.sockets.connected[sock].request.user;\r\n                usersByRoom[userByRoom._id] = userByRoom;\r\n            });\r\n\r\n            io.in(room).emit('joined', { users: usersByRoom });\r\n        });\r\n\r\n        socket.on('code_emit', function (eventData) {\r\n            socket.broadcast.to(eventData.id).emit(\"get_code_emit\", { value: eventData.value });\r\n        });\r\n\r\n        socket.on('language_emit', function (eventData) {\r\n            socket.broadcast.to(eventData.id).emit(\"get_language_emit\", eventData.value);\r\n        });\r\n\r\n        socket.on('disconnect', function (eventData) {\r\n            console.log(\"Client disconnected\");\r\n            Object.keys(sockets).forEach(userId => {\r\n                try {\r\n                    let sock = sockets[userId];\r\n                    if (sock.id == socket.id) {\r\n                        delete usersByRoom[userId];\r\n                        sockets[userId] = null;\r\n                        io.in(currRoom).emit('unjoined', { user: userId });\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error, \"disconnecting client\");\r\n                }\r\n            });\r\n        });\r\n    });\r\n}\r\n"],"file":"editor.js"}