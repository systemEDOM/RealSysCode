{"version":3,"sources":["../../src/validations/user_update.validations.js"],"names":["not","isEmpty","withMessage","isEmail","custom","value","req","query","User","findOne","email","exec","then","userFound","user","slugUsername","Promise","reject","username"],"mappings":";;;;;;;AAAA;;AACA;;;;eAEe,CACX,6BAAM,MAAN,EAAcA,GAAd,GAAoBC,OAApB,GAA8BC,WAA9B,CAA0C,wBAA1C,CADW,EAEX,6BAAM,OAAN,EAAeC,OAAf,GAAyBD,WAAzB,CAAqC,yBAArC,CAFW,EAGX,6BAAM,OAAN,EAAeF,GAAf,GAAqBC,OAArB,GAA+BC,WAA/B,CAA2C,0BAA3C,CAHW,EAIX,6BAAM,OAAN,EAAeE,MAAf,CAAuB,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,KAAoB;AACvC,MAAIC,KAAK,GAAGC,cAAKC,OAAL,CAAa;AAAEC,IAAAA,KAAK,EAAEL;AAAT,GAAb,CAAZ;;AACA,SAAOE,KAAK,CAACI,IAAN,GAAaC,IAAb,CAAkBC,SAAS,IAAI;AAClC,QAAIA,SAAS,IAAIP,GAAG,CAACQ,IAAJ,CAASC,YAAT,IAAyBF,SAAS,CAACE,YAApD,EAAkE,OAAOC,OAAO,CAACC,MAAR,CAAe,uBAAf,CAAP;AACrE,GAFM,CAAP;AAGH,CALD,CAJW,EAUX,6BAAM,UAAN,EAAkBb,MAAlB,CAA0B,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,KAAoB;AAC1C,MAAIC,KAAK,GAAGC,cAAKC,OAAL,CAAa;AAAES,IAAAA,QAAQ,EAAEb;AAAZ,GAAb,CAAZ;;AACA,SAAOE,KAAK,CAACI,IAAN,GAAaC,IAAb,CAAkBC,SAAS,IAAI;AAClC,QAAIA,SAAS,IAAIP,GAAG,CAACQ,IAAJ,CAASC,YAAT,IAAyBF,SAAS,CAACE,YAApD,EAAkE,OAAOC,OAAO,CAACC,MAAR,CAAe,yBAAf,CAAP;AACrE,GAFM,CAAP;AAGH,CALD,CAVW,EAgBX,6BAAM,UAAN,EAAkBjB,GAAlB,GAAwBC,OAAxB,GAAkCC,WAAlC,CAA8C,4BAA9C,CAhBW,C","sourcesContent":["import { check, body } from 'express-validator';\r\nimport User from '../schema/user.schema';\r\n\r\nexport default [\r\n    check('name').not().isEmpty().withMessage('Name must not be empty'),\r\n    check('email').isEmail().withMessage('E-mail must be an email'),\r\n    check('email').not().isEmpty().withMessage('E-mail must not be empty'),\r\n    check('email').custom( (value, { req }) => {\r\n        var query = User.findOne({ email: value})\r\n        return query.exec().then(userFound => {\r\n            if (userFound && req.user.slugUsername != userFound.slugUsername) return Promise.reject('E-mail already in use');\r\n        });\r\n    }),\r\n    check('username').custom( (value, { req }) => {\r\n        var query = User.findOne({ username: value})\r\n        return query.exec().then(userFound => {\r\n            if (userFound && req.user.slugUsername != userFound.slugUsername) return Promise.reject('Username already in use');\r\n        });\r\n    }),\r\n    check('username').not().isEmpty().withMessage('Username must not be empty'),\r\n];"],"file":"user_update.validations.js"}