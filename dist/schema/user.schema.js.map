{"version":3,"sources":["../../src/schema/user.schema.js"],"names":["Schema","mongoose","UserSchema","name","type","String","required","max","username","unique","email","password","min","snippets","Types","ObjectId","ref","timestamps","pre","next","bcrypt","hash","_update","$set","set","slugUsername","methods","matchPassword","compare","plugin","field","update","alwaysRecreate","module","exports","model"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,GAAGC,kBAASD,MAAxB;AAEA,IAAIE,UAAU,GAAG,IAAIF,MAAJ,CAAW;AACxBG,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAEC,MADJ;AAEFC,IAAAA,QAAQ,EAAE,IAFR;AAGFC,IAAAA,GAAG,EAAE;AAHH,GADkB;AAMxBC,EAAAA,QAAQ,EAAE;AACNJ,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE,IAFJ;AAGNG,IAAAA,MAAM,EAAE,IAHF;AAINF,IAAAA,GAAG,EAAE;AAJC,GANc;AAYxBG,EAAAA,KAAK,EAAE;AACHN,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,QAAQ,EAAE,IAFP;AAGHG,IAAAA,MAAM,EAAE,IAHL;AAIHF,IAAAA,GAAG,EAAE;AAJF,GAZiB;AAkBxBI,EAAAA,QAAQ,EAAE;AACNP,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE,IAFJ;AAGNC,IAAAA,GAAG,EAAE,EAHC;AAINK,IAAAA,GAAG,EAAE;AAJC,GAlBc;AAwBxBC,EAAAA,QAAQ,EAAE,CACN;AAAET,IAAAA,IAAI,EAAEH,kBAASD,MAAT,CAAgBc,KAAhB,CAAsBC,QAA9B;AAAwCC,IAAAA,GAAG,EAAE;AAA7C,GADM;AAxBc,CAAX,EA2Bd;AAAEC,EAAAA,UAAU,EAAE;AAAd,CA3Bc,CAAjB;AA6BAf,UAAU,CAACgB,GAAX,CAAe,MAAf,EAAuB,gBAAgBC,IAAhB,EAAsB;AACzC,OAAKR,QAAL,GAAgB,MAAMS,gBAAOC,IAAP,CAAY,KAAKV,QAAjB,EAA2B,EAA3B,CAAtB;AACAQ,EAAAA,IAAI;AACP,CAHD;AAKAjB,UAAU,CAACgB,GAAX,CAAe,WAAf,EAA4B,gBAAgBC,IAAhB,EAAsB;AAC9C,MAAI,KAAKG,OAAL,CAAaC,IAAb,CAAkBZ,QAAtB,EACI,KAAKa,GAAL,CAAS;AAAEb,IAAAA,QAAQ,EAAE,MAAMS,gBAAOC,IAAP,CAAY,KAAKC,OAAL,CAAaC,IAAb,CAAkBZ,QAA9B,EAAwC,EAAxC;AAAlB,GAAT;AAEJ,MAAI,KAAKW,OAAL,CAAad,QAAjB,EACI,KAAKgB,GAAL,CAAS;AAAEC,IAAAA,YAAY,EAAE,sBAAQ,KAAKH,OAAL,CAAad,QAArB;AAAhB,GAAT;AACJW,EAAAA,IAAI;AACP,CAPD;AASAjB,UAAU,CAACwB,OAAX,GAAqB;AACjBC,EAAAA,aAAa,EAAE,gBAAgBhB,QAAhB,EAA0B;AACrC,WAAO,MAAMS,gBAAOQ,OAAP,CAAejB,QAAf,EAAyB,KAAKA,QAA9B,CAAb;AACH;AAHgB,CAArB;AAMAT,UAAU,CAAC2B,MAAX,CAAkB,+BAAK,UAAL,EAAiB;AAAEC,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,MAAM,EAAE,IAAjC;AAAuCC,EAAAA,cAAc,EAAE;AAAvD,CAAjB,CAAlB;AAEAC,MAAM,CAACC,OAAP,GAAiBjC,kBAASkC,KAAT,CAAe,MAAf,EAAuBjC,UAAvB,CAAjB","sourcesContent":["import mongoose from \"mongoose\";\r\nimport bcrypt from 'bcrypt';\r\nimport slug from 'mongoose-url-slugs';\r\nimport slugify from 'slugify';\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nlet UserSchema = new Schema({\r\n    name: {\r\n        type: String,\r\n        required: true,\r\n        max: 100\r\n    },\r\n    username: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n        max: 50,\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n        max: 150\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true,\r\n        max: 30,\r\n        min: 4\r\n    },\r\n    snippets: [\r\n        { type: mongoose.Schema.Types.ObjectId, ref: 'Snippet' }\r\n    ]\r\n}, { timestamps: true });\r\n\r\nUserSchema.pre('save', async function (next) {\r\n    this.password = await bcrypt.hash(this.password, 10);\r\n    next();\r\n});\r\n\r\nUserSchema.pre('updateOne', async function (next) {\r\n    if (this._update.$set.password)\r\n        this.set({ password: await bcrypt.hash(this._update.$set.password, 10) });\r\n\r\n    if (this._update.username)\r\n        this.set({ slugUsername: slugify(this._update.username) });\r\n    next();\r\n});\r\n\r\nUserSchema.methods = {\r\n    matchPassword: async function (password) {\r\n        return await bcrypt.compare(password, this.password);\r\n    }\r\n};\r\n\r\nUserSchema.plugin(slug('username', { field: 'slugUsername', update: true, alwaysRecreate: true }));\r\n\r\nmodule.exports = mongoose.model(\"User\", UserSchema);"],"file":"user.schema.js"}