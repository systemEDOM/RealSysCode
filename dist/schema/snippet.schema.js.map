{"version":3,"sources":["../../src/schema/snippet.schema.js"],"names":["Schema","mongoose","SnippetSchema","title","type","String","required","unique","max","short_description","password","language","code","user","Types","ObjectId","ref","timestamps","pre","next","bcrypt","hash","_update","$set","set","slug","methods","matchPassword","compare","plugin","field","module","exports","model"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,MAAM,GAAGC,kBAASD,MAAxB;AAEA,IAAIE,aAAa,GAAG,IAAIF,MAAJ,CAAW;AAC3BG,EAAAA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,QAAQ,EAAE,IAFP;AAGHC,IAAAA,MAAM,EAAE,IAHL;AAIHC,IAAAA,GAAG,EAAE;AAJF,GADoB;AAO3BC,EAAAA,iBAAiB,EAAE;AACfL,IAAAA,IAAI,EAAEC,MADS;AAEfC,IAAAA,QAAQ,EAAE,IAFK;AAGfE,IAAAA,GAAG,EAAE;AAHU,GAPQ;AAY3BE,EAAAA,QAAQ,EAAE;AACNN,IAAAA,IAAI,EAAEC,MADA;AAENG,IAAAA,GAAG,EAAE;AAFC,GAZiB;AAgB3BG,EAAAA,QAAQ,EAAE;AACNP,IAAAA,IAAI,EAAEC,MADA;AAENG,IAAAA,GAAG,EAAE;AAFC,GAhBiB;AAoB3BI,EAAAA,IAAI,EAAE;AACFR,IAAAA,IAAI,EAAEC;AADJ,GApBqB;AAuB3BQ,EAAAA,IAAI,EAAE;AACFT,IAAAA,IAAI,EAAEH,kBAASD,MAAT,CAAgBc,KAAhB,CAAsBC,QAD1B;AAEFC,IAAAA,GAAG,EAAE;AAFH;AAvBqB,CAAX,EA2BjB;AAAEC,EAAAA,UAAU,EAAE;AAAd,CA3BiB,CAApB;AA6BAf,aAAa,CAACgB,GAAd,CAAkB,MAAlB,EAA0B,gBAAgBC,IAAhB,EAAsB;AAC5C,MAAI,KAAKT,QAAT,EACI,KAAKA,QAAL,GAAgB,MAAMU,gBAAOC,IAAP,CAAY,KAAKX,QAAjB,EAA2B,EAA3B,CAAtB;AACJS,EAAAA,IAAI;AACP,CAJD;AAMAjB,aAAa,CAACgB,GAAd,CAAkB,WAAlB,EAA+B,gBAAgBC,IAAhB,EAAsB;AACjD,MAAI,KAAKG,OAAL,CAAaC,IAAb,CAAkBb,QAAtB,EACI,KAAKc,GAAL,CAAS;AAAEd,IAAAA,QAAQ,EAAE,MAAMU,gBAAOC,IAAP,CAAY,KAAKC,OAAL,CAAaC,IAAb,CAAkBb,QAA9B,EAAwC,EAAxC;AAAlB,GAAT;AAEJ,MAAI,KAAKY,OAAL,CAAanB,KAAjB,EACI,KAAKqB,GAAL,CAAS;AAAEC,IAAAA,IAAI,EAAE,sBAAQ,KAAKH,OAAL,CAAanB,KAArB;AAAR,GAAT;AACJgB,EAAAA,IAAI;AACP,CAPD;AASAjB,aAAa,CAACwB,OAAd,GAAwB;AACpBC,EAAAA,aAAa,EAAE,gBAAgBjB,QAAhB,EAA0B;AACrC,WAAO,MAAMU,gBAAOQ,OAAP,CAAelB,QAAf,EAAyB,KAAKA,QAA9B,CAAb;AACH;AAHmB,CAAxB;AAMAR,aAAa,CAAC2B,MAAd,CAAqB,+BAAK,OAAL,EAAc;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAd,CAArB;AAEAC,MAAM,CAACC,OAAP,GAAiB/B,kBAASgC,KAAT,CAAe,SAAf,EAA0B/B,aAA1B,CAAjB","sourcesContent":["import mongoose, { mongo } from \"mongoose\";\r\nimport bcrypt from 'bcrypt';\r\nimport slug from 'mongoose-url-slugs';\r\nimport slugify from 'slugify';\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nlet SnippetSchema = new Schema({\r\n    title: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n        max: 200\r\n    },\r\n    short_description: {\r\n        type: String,\r\n        required: true,\r\n        max: 200,\r\n    },\r\n    password: {\r\n        type: String,\r\n        max: 20\r\n    },\r\n    language: {\r\n        type: String,\r\n        max: 30\r\n    },\r\n    code: {\r\n        type: String\r\n    },\r\n    user: {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'User'\r\n    }\r\n}, { timestamps: true });\r\n\r\nSnippetSchema.pre('save', async function (next) {\r\n    if (this.password)\r\n        this.password = await bcrypt.hash(this.password, 10);\r\n    next();\r\n});\r\n\r\nSnippetSchema.pre('updateOne', async function (next) {\r\n    if (this._update.$set.password)\r\n        this.set({ password: await bcrypt.hash(this._update.$set.password, 10) });\r\n\r\n    if (this._update.title)\r\n        this.set({ slug: slugify(this._update.title) });\r\n    next();\r\n});\r\n\r\nSnippetSchema.methods = {\r\n    matchPassword: async function (password) {\r\n        return await bcrypt.compare(password, this.password);\r\n    }\r\n};\r\n\r\nSnippetSchema.plugin(slug('title', { field: 'slug' }));\r\n\r\nmodule.exports = mongoose.model(\"Snippet\", SnippetSchema);"],"file":"snippet.schema.js"}