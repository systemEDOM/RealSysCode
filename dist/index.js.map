{"version":3,"sources":["../src/index.js"],"names":["require","config","MongoStore","session","app","server","Server","io","use","express","static","__dirname","engine","hbs","set","mongoStore","mongooseConnection","db","bodyParser","urlencoded","extended","secret","resave","saveUninitialized","store","passport","initialize","req","res","next","locals","message","flash","user","routes","sockets","usersByRoom","passportSocketIo","authorize","key","cookieParser","on","socket","currRoom","request","_query","snippetID","_id","console","log","room","join","Object","keys","adapter","rooms","forEach","sock","userByRoom","connected","in","emit","users","eventData","id","broadcast","to","value","userId","port","process","env","PORT","listen"],"mappings":"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","sourcesContent":["import express from \"express\";\r\nimport bodyParser from \"body-parser\";\r\nimport db from \"./config/database\";\r\nimport hbs from \"./config/handlebars\";\r\nimport routes from './routes/index';\r\nimport flash from 'connect-flash';\r\nimport passport from 'passport';\r\nimport cookieParser from 'cookie-parser';\r\nimport session from 'express-session';\r\nimport methodOverride from 'method-override';\r\nimport configPassport from './config/passport';\r\nimport passportSocketIo from 'passport.socketio';\r\n\r\nrequire('dotenv').config()\r\n\r\nconst MongoStore = require('connect-mongo')(session);\r\nconst app = express();\r\n\r\nconst server = require('http').Server(app);\r\nconst io = require('socket.io')(server);\r\n\r\napp.use(express.static(__dirname + \"/../public/\"));\r\n\r\napp.engine(\"hbs\", hbs);\r\napp.set(\"view engine\", \"hbs\");\r\n\r\nvar mongoStore = new MongoStore({\r\n    mongooseConnection: db,\r\n});\r\n\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(methodOverride('_method'));\r\napp.use(cookieParser('secret123'));\r\napp.use(session({ secret: 'secret123', resave: true, saveUninitialized: true, store: mongoStore }));\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\napp.use(flash());\r\napp.use((req, res, next) => {\r\n    res.locals.message = req.flash();\r\n    res.locals.user = req.user || null;\r\n    next();\r\n});\r\napp.use(routes);\r\n\r\nlet sockets = {};\r\nlet usersByRoom = {};\r\nio.use(passportSocketIo.authorize({\r\n    key: 'connect.sid',\r\n    secret: \"secret123\",\r\n    passport: passport,\r\n    cookieParser: cookieParser,\r\n    store: mongoStore,\r\n}));\r\nio.on('connection', function (socket) {\r\n    let currRoom = socket.request._query.snippetID;\r\n    if (!sockets[socket.request.user._id]) {\r\n        console.log(\"Client connected\");\r\n        socket.room = currRoom;\r\n        sockets[socket.request.user._id] = socket;\r\n    }\r\n\r\n    //socket.join(currRoom);\r\n\r\n\r\n    //console.log(io.sockets.adapter.rooms[currRoom], currRoom);\r\n    \r\n    \r\n    //socket.to(currRoom).emit('joined', { users: usersByRoom });\r\n\r\n    socket.on('create', function (room) {\r\n        socket.join(room);\r\n        Object.keys(io.sockets.adapter.rooms[currRoom].sockets).forEach( sock => {\r\n            let userByRoom = io.sockets.connected[sock].request.user;\r\n            usersByRoom[userByRoom._id] = userByRoom;\r\n        });\r\n        console.log(usersByRoom);\r\n        console.log(\"emiting...\", room);\r\n        \r\n        io.in(room).emit('joined', { users: usersByRoom });\r\n    });\r\n\r\n\r\n    socket.on('code_emit', function (eventData) {\r\n        if (socket.request.user && sockets[socket.request.user._id]) {\r\n            console.log(eventData.id);\r\n            socket.broadcast.to(eventData.id).emit(\"get_code_emit\", eventData.value);\r\n        }\r\n    });\r\n\r\n    socket.on('disconnect', function (eventData) {\r\n        console.log(\"disconnected\");\r\n        Object.keys(sockets).forEach( userId => {\r\n            let sock = sockets[userId];\r\n            if (sock.id == socket.id) {\r\n                sockets[userId] = null;\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nconst port = process.env.PORT || 3000;\r\nserver.listen(port, () => {\r\n    console.log(`Server is up and running on port: ${port}`);\r\n});"],"file":"index.js"}